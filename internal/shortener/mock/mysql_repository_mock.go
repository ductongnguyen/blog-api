// Code generated by MockGen. DO NOT EDIT.
// Source: mysql.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/ductong169z/shorten-url/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateShortURL mocks base method.
func (m *MockRepository) CreateShortURL(ctx context.Context, url *models.ShortURL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShortURL", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateShortURL indicates an expected call of CreateShortURL.
func (mr *MockRepositoryMockRecorder) CreateShortURL(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShortURL", reflect.TypeOf((*MockRepository)(nil).CreateShortURL), ctx, url)
}

// GetShortURLByCode mocks base method.
func (m *MockRepository) GetShortURLByCode(ctx context.Context, code string) (*models.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortURLByCode", ctx, code)
	ret0, _ := ret[0].(*models.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortURLByCode indicates an expected call of GetShortURLByCode.
func (mr *MockRepositoryMockRecorder) GetShortURLByCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortURLByCode", reflect.TypeOf((*MockRepository)(nil).GetShortURLByCode), ctx, code)
}

// IncrementClickCount mocks base method.
func (m *MockRepository) IncrementClickCount(ctx context.Context, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementClickCount", ctx, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementClickCount indicates an expected call of IncrementClickCount.
func (mr *MockRepositoryMockRecorder) IncrementClickCount(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementClickCount", reflect.TypeOf((*MockRepository)(nil).IncrementClickCount), ctx, code)
}

// IsShortCodeExist mocks base method.
func (m *MockRepository) IsShortCodeExist(ctx context.Context, code string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsShortCodeExist", ctx, code)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsShortCodeExist indicates an expected call of IsShortCodeExist.
func (mr *MockRepositoryMockRecorder) IsShortCodeExist(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsShortCodeExist", reflect.TypeOf((*MockRepository)(nil).IsShortCodeExist), ctx, code)
}
