// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/ductong169z/shorten-url/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// GetShortURLByCode mocks base method.
func (m *MockCache) GetShortURLByCode(ctx context.Context, code string) (*models.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortURLByCode", ctx, code)
	ret0, _ := ret[0].(*models.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortURLByCode indicates an expected call of GetShortURLByCode.
func (mr *MockCacheMockRecorder) GetShortURLByCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortURLByCode", reflect.TypeOf((*MockCache)(nil).GetShortURLByCode), ctx, code)
}

// SetShortURLByCode mocks base method.
func (m *MockCache) SetShortURLByCode(ctx context.Context, code string, url *models.ShortURL, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetShortURLByCode", ctx, code, url, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetShortURLByCode indicates an expected call of SetShortURLByCode.
func (mr *MockCacheMockRecorder) SetShortURLByCode(ctx, code, url, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetShortURLByCode", reflect.TypeOf((*MockCache)(nil).SetShortURLByCode), ctx, code, url, ttl)
}
