// Code generated by MockGen. DO NOT EDIT.
// Source: delivery.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockHandlers is a mock of Handlers interface.
type MockHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockHandlersMockRecorder
}

// MockHandlersMockRecorder is the mock recorder for MockHandlers.
type MockHandlersMockRecorder struct {
	mock *MockHandlers
}

// NewMockHandlers creates a new mock instance.
func NewMockHandlers(ctrl *gomock.Controller) *MockHandlers {
	mock := &MockHandlers{ctrl: ctrl}
	mock.recorder = &MockHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlers) EXPECT() *MockHandlersMockRecorder {
	return m.recorder
}

// Resolve mocks base method.
func (m *MockHandlers) Resolve(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Resolve", c)
}

// Resolve indicates an expected call of Resolve.
func (mr *MockHandlersMockRecorder) Resolve(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockHandlers)(nil).Resolve), c)
}

// Shorten mocks base method.
func (m *MockHandlers) Shorten(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shorten", c)
}

// Shorten indicates an expected call of Shorten.
func (mr *MockHandlersMockRecorder) Shorten(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shorten", reflect.TypeOf((*MockHandlers)(nil).Shorten), c)
}
